makeCacheMatrix <- function(x = matrix()) {
i<- NULL
set<- function(y){
x<- y
i<- NULL
}
get<- function() x
setiv<- function(inverse) i <<- inverse
getiv<-function() i
list(set=set, get= get, setiv= setiv, getiv= getiv)
}
test<- matrix(1:20,2,10)
test
test<- matrix(1:20,4,5)
test
cachematrix(test)
makeCacheMatrix(test)
cacheSolve(test)
## Return a matrix that is the inverse of 'x'
i<- x$getiv()
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i<- x$getiv()
if (!is.null(i)){
message("getting cached data")
return(i)
}
data<- x$get()
i<- solve(data,...)
x$setiv(i)
return(i)
}
cacheSolve(test)
cachematrix<-makeCacheMatrix(test)
cachematrix$get()
cachematrix$getiv()
cachesolve(cachematrix)
cacheSolve(cachematrix)
test<- matrix(1:16,4,4)
cachematrix<-makeCacheMatrix(test)
cachematrix
cachematrix$get()
cachematrix$getiv()
cacheSolve(cachematrix)
cacheSolve(cachematrix)
test<- matrix(1:99,33,33)
cachematrix
cachematrix<- makeCacheMatrix(test)
cachematrix$get()
cachematrix$getiv()
cacheSolve(test)
cacheSolve(cachematrix)
test<- matrix(rnom,33,33)
test<- matrix(runif(99,1,1000),33,33)
test<- matrix(runif(16,1,1000),4,4)
test
cachematrix<- makeCacheMatrix(test)
cachematrix$get()
cachematrix$getiv()
cacheSolve(cachematrix)
